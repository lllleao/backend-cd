name: Deploy to Oracle VM

on:
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Install dependencies
              run: npm ci

            - name: Run lint
              run: npm run lint

            - name: Obter IP público do runner
              id: ip
              uses: haythem/public-ip@v1.2

            - name: Instalar OCI CLI
              run: |
                  curl -sL https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
                  echo "PATH=$HOME/bin:$PATH" >> $GITHUB_ENV
                  mkdir -p ~/.oci

            - name: Criar chave privada OCI
              run: |
                  echo "${{ secrets.OCI_API_KEY }}" > ~/.oci/oci_api_key.pem
                  chmod 600 ~/.oci/oci_api_key.pem

            - name: Criar arquivo de configuração OCI
              run: |
                  echo "${{ secrets.OCI_CONFIG_FILE }}" > ~/.oci/config
                  chmod 600 ~/.oci/config

            - name: Verificar OCI CLI
              run: oci --version

            - name: Adicionar IP à Security List
              run: |
                  echo "Adicionando IP ${{ steps.ip.outputs.ipv4 }} à Security List..."
                  oci network security-list get \
                  --security-list-id ${{ secrets.OCI_SECURITY_LIST_ID }} \
                  --query 'data."ingress-security-rules"' \
                  --output json > current_rules.json

                  jq "[.[]] + [{
                  \"protocol\": \"6\",
                  \"source\": \"${{ steps.ip.outputs.ipv4 }}/32\",
                  \"sourceType\": \"CIDR_BLOCK\",
                  \"tcpOptions\": {
                      \"destinationPortRange\": {
                      \"min\": 22,
                      \"max\": 22
                      }
                  },
                  \"isStateless\": false,
                  \"description\": \"GitHub Actions temporary SSH access\"
                  }]" current_rules.json > updated_rules.json

                  echo "Regras atualizadas:"
                  cat updated_rules.json | jq .

                  oci network security-list update \
                  --security-list-id ${{ secrets.OCI_SECURITY_LIST_ID }} \
                  --ingress-security-rules file://updated_rules.json \
                  --force

            - name: Login no OCIR
              run: echo "${{ secrets.OCIR_TOKEN }}" | docker login gru.ocir.io -u "${{ secrets.OCIR_USERNAME }}" --password-stdin

            - name: Gerar .env para build
              run: |
                  echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
                  echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}" >> .env

            - name: Build da imagem
              run: docker compose -f docker-compose.prod.yml build

            - name: Push da imagem
              run: docker compose -f docker-compose.prod.yml push

            - name: Deploy remoto via SSH
              uses: appleboy/ssh-action@v0.1.10
              with:
                  host: ${{ secrets.VM_HOST }}
                  username: ${{ secrets.VM_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  script: |
                      echo "${{ secrets.OCIR_TOKEN }}" | docker login gru.ocir.io -u "${{ secrets.OCIR_USERNAME }}" --password-stdin
                      cd /home/ubuntu/projeto/backend-cd
                      sudo docker compose -f docker-compose.prod.yml pull
                      sudo docker compose -f docker-compose.prod.yml up -d --no-build
                      sudo docker system prune -af

            - name: Remover IP da Security List (preservando regras)
              if: always()
              run: |
                  echo "Removendo IP ${{ steps.ip.outputs.ipv4 }} da Security List..."
                  oci network security-list get \
                  --security-list-id ${{ secrets.OCI_SECURITY_LIST_ID }} \
                  --query 'data."ingress-security-rules"' \
                  --output json > all_rules.json

                  jq --arg ip "${{ steps.ip.outputs.ipv4 }}" '[.[] | select(.source | contains($ip) | not)]' all_rules.json > filtered_rules.json

                  oci network security-list update \
                  --security-list-id ${{ secrets.OCI_SECURITY_LIST_ID }} \
                  --ingress-security-rules file://filtered_rules.json \
                  --force
